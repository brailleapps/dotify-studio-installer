plugins {
  id "de.inetsoftware.setupbuilder" version "3.4.3"
  id 'edu.sc.seis.launch4j' version '2.4.2'
}

apply plugin: 'base'

def resourceDir = 'build-resources'
def tempDir = 'build/tmp'

def artifactName = "dotify-studio"
def appBase = "${tempDir}/dotify-studio"

configurations {
	app
	appPlugins
}

repositories {
    mavenCentral()
    //mavenLocal()
    maven { url "https://oss.sonatype.org/content/groups/staging" }
    //maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
	app ("org.daisy.dotify:$artifactName:$version@zip") {
		transitive false
	}
}

task unzip(type: Copy, description: 'Unzips the distribution to a temporary folder.') {
    from zipTree(file(configurations.app.iterator().next()))
    into file("${tempDir}")
    eachFile {details ->
		def targetPath = modifyPath(details.path)
		details.path = targetPath
	}
}

task unzipFlatLib(type: Copy, description: 'Unzips the distribution to a temporary folder.') {
	from zipTree(file(configurations.app.iterator().next()))
	into file("${tempDir}")
	eachFile {details ->
		def targetPath = modifyPathFlatLib(details.path)
		details.path = targetPath
	}
}

task copyPlugins(type: Copy, dependsOn: 'unzip', description: 'Copies additional jars to the plugins folder (requires editing of build.gradle)') {
	from configurations.appPlugins
	into file("${appBase}/lib/plugins")
}

def modifyPath(def path) {
	def modified=path.replaceAll('\\Adotify-studio[^/]*(.+)', {"dotify-studio${it[1]}"})
	return modified
}

def modifyPathFlatLib(def path) {
	def modified=path.replaceAll('\\Adotify-studio[^/]*(.+)', {"dotify-studio${it[1]}"})
	// Remove the 'lib' part of the path because the app.mainjar property of the cfg file that java packager generates cannot be set.
	return modified.replaceAll('\\Adotify-studio/lib/(.*)', {"dotify-studio/${it[1]}"})
}

task copyIcon(type: Copy, dependsOn: 'unzip', description: 'Copies file icon to distribution.') {
	from ("${resourceDir}") {
		include 'favicon.ico'
	} 
	into ("${appBase}")
}

task copyExe(type: Copy, dependsOn: 'createExe') {
	from ('build/launch4j') {
		include '*.exe'
	} 
	into ("${appBase}")
}

task deleteBin(type: Delete, dependsOn: 'unzip', description: 'Removes the bin folder from the distribution.') {
	delete "${appBase}/bin"
}

task deleteBinFlatLib(type: Delete, dependsOn: 'unzipFlatLib', description: 'Removes the bin folder from the distribution.') {
	delete "${appBase}/bin"
}

def launch4jManifest = file("$buildDir/launch4j.manifest") 

task createLaunch4jManifest(description: 'Creates the Launch4j manifest from a template.') {
	doLast() {
		String contents = file('build-resources/launch4j.manifest').getText('UTF-8')
		launch4jManifest.getParentFile().mkdirs()
		launch4jManifest.write(contents.replaceAll('(<assemblyIdentity.+? version=")([\\d\\.A-Za-z\\-]+)("\\/>)', "\$1$version.0\$3"), 'UTF-8')
	}
	outputs.file launch4jManifest
	outputs.upToDateWhen{ file('gradle.properties').lastModified()<file(launch4jManifest).lastModified() }
}

createExe.dependsOn('createLaunch4jManifest')

setupBuilder {
    vendor = 'DAISY Consortium'
    application = releaseName
    appIdentifier = artifactName
    description = 'Creates, manages and embosses PEF-files'
    mainJar = "lib/${artifactName}-${version}.jar"
    mainClass = 'application.ui.MainFx'
    //licenseFile = 'license.txt'
    // icons in different sizes for different usage. you can also use a single *.ico or *.icns file
	icons = ['build-resources/app-icon.ico']
    // files for all platforms
    from ("${appBase}") {
        include '**/*'
    }
    failOnEmptyFrom=true
}

task msi32( type: com.inet.gradle.setup.msi.Msi ) {
	//32 bit specifics
    arch = "x86"
    classifier = "x86"
}

launch4j {
	mainClassName = 'application.ui.MainFx'
	dontWrapJar = true
	icon = '../../build-resources/app-icon.ico'
	manifest = '../launch4j.manifest'
	jar = "lib/${artifactName}-${version}.jar"
	copyConfigurable = files { file("${tempDir}/dotify-studio/lib").listFiles() }
	outfile = 'dotify-studio.exe'
	bundledJrePath = 'jre'
}

configure( [msi, msi32] ) {
    // included to reduce the build time
    languages = ['en-US']
    wxsTemplate = './build-resources/template.wxs'

    doFirst {
        setupBuilder {
		    desktopStarter {
		    	displayName = releaseName
        		description = appDescription
		        executable = "dotify-studio.exe"
		        location = "ApplicationMenu"
		    }
		    bundleJre = 1.8
        }
    }
}

configure( [dmg] ) {
	doFirst {
		setupBuilder {
			desktopStarter {
				displayName = releaseName
				description = appDescription
			}
			bundleJre = 1.8
		}
	}
}

configure( [deb, rpm] ) {
    doFirst {
        setupBuilder {
		defaultResourceLanguage 'en'
		longDescription 'build-resources/longDesc_en.txt'
		desktopStarter {
			displayName = releaseName
        	description = appDescription
			executable = "bin/dotify-studio"
			location = "ApplicationMenu"
			categories = "Office"
		}
        }
    }
}

msi.dependsOn('unzip', 'deleteBin', 'copyIcon', 'copyPlugins', 'copyExe')
msi32.dependsOn('unzip', 'deleteBin', 'copyIcon', 'copyPlugins', 'copyExe')
dmg.dependsOn('unzip', 'copyPlugins')
deb.dependsOn('unzip', 'copyPlugins')
rpm.dependsOn('unzip', 'copyPlugins')

deb {
    maintainerEmail = 'joel.hakansson@mtm.se'
    section = 'text'
    postinst = 'chmod +x /usr/share/dotify-studio/bin/dotify-studio'
}

rpm {
    postinst = 'chmod +x /usr/share/dotify-studio/bin/dotify-studio'
}

// Javapackager

ant.taskdef (resource:'com/sun/javafx/tools/ant/antlib.xml', 
	uri: 'javafx:com.sun.javafx.tools.ant',
	// JDK is required. Also, cannot use java.home because it might return the jre.
	classpath: System.getenv("JAVA_HOME") + '/lib/ant-javafx.jar'
)

def javaPackagerFolder = file('build/javapackager');

ext.runJavaPackager = { bundles, appIcon, appName ->
	String path = javaPackagerFolder.getAbsolutePath()

	ant {
		'javafx:com.sun.javafx.tools.ant:deploy'(outdir: path, outfile: 'dotify-studio', nativeBundles: bundles) { 
			info(title: releaseName, description: appDescription, category: 'Office') {
				icon(href: appIcon)
				association(
					extension: 'pef',
					description: 'Portable embosser format',
					mimetype: 'application/x-pef+xml'
				)
				association(
					extension: 'obfl',
					description: 'Open braille formatting language',
					mimetype: 'application/x-obfl+xml'
				)
			}
			application(
				name: appName, 
				mainClass: 'application.ui.MainFx',
				version: version
			)
			resources {
				fileset(dir: "${tempDir}/dotify-studio", includes: '**/*.*')
			}
			bundleArgument(arg: 'email', value: 'joel.hakansson@mtm.se')
			bundleArgument(arg: 'win.menuGroup', value: releaseName)
		}
	}

}

task jpMsi(dependsOn: 'deleteBinFlatLib', description: 'Uses javapackager to create msi installer (experimental).') {
	doLast() {
		runJavaPackager('msi', file('build-resources/app-icon.ico').getAbsolutePath(), 'dotify-studio')
	}
	outputs.dir javaPackagerFolder
}

task jpDeb(dependsOn: 'unzip', description: 'Uses javapackager to create deb installer (experimental).') {
	doLast() {
		runJavaPackager('deb', file('build-resources/app-icon.png').getAbsolutePath(), releaseName)
	}
	outputs.dir javaPackagerFolder
}

task jpRpm(dependsOn: 'unzip', description: 'Uses javapackager to create rpm installer (experimental).') {
	doLast() {
		runJavaPackager('rpm', file('build-resources/app-icon.png').getAbsolutePath(), releaseName)
	}
	outputs.dir javaPackagerFolder
}

task javapackager(dependsOn: 'unzip', description: 'Uses javapackager to create installers (experimental).') {
	doLast() {
		String path = file('build/javapackager').getAbsolutePath()
		String filename = 'dotify-studio'
		ant {
			'javafx:com.sun.javafx.tools.ant:deploy'(outdir: path, outfile: filename, nativeBundles: 'installer') { 
				info(title: releaseName, description: appDescription)
				application(
					name: filename, 
					mainClass: 'application.ui.MainFx',
					version: version
				)
				resources {
					fileset(dir: "${tempDir}/dotify-studio", includes: '**/*.*')
				}
			}
		}
	}
}

task wrapper(type: Wrapper, description: 'Refreshes the gradle wrapper') {
    gradleVersion = '3.5'
}
